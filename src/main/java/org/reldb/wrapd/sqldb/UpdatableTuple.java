package org.reldb.wrapd.sqldb;

import org.reldb.toolbox.types.Pair;
import org.reldb.wrapd.exceptions.InvalidValueException;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;
import java.util.Objects;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * The base class for all updatable tuples. Derived classes are usually auto-generated by TupleTypeGenerator.
 */
public abstract class UpdatableTuple extends Tuple implements Cloneable {

    /** Database used to create this Tuple. */
    protected final Database database;

    /** Backup made at time tuple is retrieved, prior to changing any fields. */
    private UpdatableTuple __backup = null;

    /**
     * Constructor.
     *
     * @param database The Database that created this UpdatableTuple.
     */
    protected UpdatableTuple(Database database) {
        this.database = database;
    }

    /**
     * Constructor. Not updatable.
     */
    protected UpdatableTuple() {
        this.database = null;
    }

    /**
     * Create backup, to facilitate identifying changed fields as part of update.
     *
     * @throws CloneNotSupportedException Thrown if creating clone() of Tuple fails.
     */
    void backup() throws CloneNotSupportedException {
        __backup = (UpdatableTuple) super.clone();
    }

    /**
     * Obtain backup, to facilitate identifying changed fields as part of update.
     *
     * @return Backup Tuple.
     */
    UpdatableTuple getBackup() {
        return __backup;
    }

    /**
     * Failure to retrieve a Field.
     */
    public static class FieldGetFailure {
        /** Field whose value we're trying to retrieve from a class instance. */
        public final Field field;
        /** Reason we couldn't retrieve the given field. */
        public final Throwable failure;
        /** Constructor. */
        FieldGetFailure(Field field, Throwable failure) {
            this.field = field;
            this.failure = failure;
        }
    }

    private Object fieldGetWrapper(List<FieldGetFailure> failures, Field field, UpdatableTuple tuple) {
        try {
            return field.get(tuple);
        } catch (Throwable t) {
            failures.add(new FieldGetFailure(field, t));
            return null;
        }
    }

    /**
     * Insert this Tuple.
     *
     * @param connection Connection to database, typically obtained via a Transaction.
     * @param tableName Table name.
     * @return List of failures to retrieve one or more fields. Empty if all fields retrieved.
     * @throws SQLException Failure.
     */
    public List<FieldGetFailure> insert(Connection connection, String tableName) throws SQLException {
        if (database == null)
            throw new InvalidValueException("Tuple is not insertable, because this Tuple was not constructed with a Database argument.");
        Supplier<Stream<Field>> dataFields = () -> TupleTypeGenerator.getDataFields(getClass());
        Supplier<Stream<String>> columns = () -> dataFields.get().map(Field::getName);
        var columnNames = columns.get().collect(Collectors.joining(", "));
        var parms = "?"
                .repeat((int) columns.get().count())
                .replaceAll(".(?!$)", "$0, ");
        var sql = "INSERT INTO " + database.replaceTableNames(tableName) + "(" + columnNames + ") VALUES (" + parms + ")";
        var fieldGetFailures = new LinkedList<FieldGetFailure>();
        var columnValues = dataFields
                .get()
                .map(field -> fieldGetWrapper(fieldGetFailures, field, this))
                .toArray(Object[]::new);
        if (fieldGetFailures.size() > 0)
            return fieldGetFailures;
        database.update(connection, sql, columnValues);
        return fieldGetFailures;
    }

    /**
     * Insert this Tuple.
     *
     * @param tableName Table name
     * @return List of failures to retrieve one or more fields. Empty if all fields retrieved.
     * @throws SQLException Failure.
     */
    public List<FieldGetFailure> insert(String tableName) throws SQLException {
        if (database == null)
            throw new InvalidValueException("Tuple is not insertable, because this Tuple was not constructed with a Database argument.");
        return database.useConnection(conn -> insert(conn, tableName));
    }

    /**
     * Return true if the result of an insert(...) contains no field failures.
     *
     * @param insertResult Result of an insert(...)
     * @return true if insertResult contains no field failures.
     */
    public static boolean isOk(List<FieldGetFailure> insertResult) {
        return insertResult.isEmpty();
    }

    /**
     * Update this tuple.
     *
     * @param connection Connection to database, typically obtained via a Transaction.
     * @param tableName Table name.
     * @return Return a pair of List&lt;FieldGetFailure&gt; where the left item is the new field
     *         get failures, and the right item is the original (backup) field get failures.
     *         Both lists in the Pair are empty if successful.
     * @throws SQLException Failure.
     */
    public Pair<List<FieldGetFailure>, List<FieldGetFailure>> update(Connection connection, String tableName) throws SQLException {
        if (database == null)
            throw new InvalidValueException("Tuple is not updatable, because this Tuple was not constructed with a Database argument.");
        var backup = getBackup();
        if (backup == null)
            throw new InvalidValueException("Tuple is not updatable. Tuples become updatable by invoking backup() after population and before mutation, usually by being obtained via Database::queryForUpdate or Database::queryAllForUpdate.");
        var fieldGetFailuresNew = new LinkedList<FieldGetFailure>();
        var fieldGetFailuresOld = new LinkedList<FieldGetFailure>();
        Supplier<Stream<Field>> dataFields = () -> TupleTypeGenerator.getDataFields(getClass());
        Supplier<Stream<Field>> changedFields = () -> dataFields.get().filter(field -> {
            var fieldNewValue = fieldGetWrapper(fieldGetFailuresNew, field, this);
            var fieldOldValue = fieldGetWrapper(fieldGetFailuresOld, field, backup);
            return !Objects.equals(fieldNewValue, fieldOldValue);
        });
        if (fieldGetFailuresNew.size() > 0 || fieldGetFailuresOld.size() > 0)
            return new Pair<>(fieldGetFailuresNew, fieldGetFailuresOld);
        var columnAssignments = changedFields
                .get()
                .map(field -> field.getName() + " = ?")
                .collect(Collectors.joining(", "));
        var key = database.getKeyColumnNamesFor(tableName);
        Supplier<Stream<Field>> rowPredicateSource = () -> (key == null) ? dataFields.get() : changedFields.get();
        var rowPredicate = rowPredicateSource
                .get()
                .map(field -> field.getName() + " = ?")
                .collect(Collectors.joining(" AND "));
        var sql = "UPDATE " + database.replaceTableNames(tableName) + " SET " + columnAssignments + " WHERE " + rowPredicate;
        var columnAssignmentNewValues = changedFields
                .get()
                .map(field -> fieldGetWrapper(fieldGetFailuresNew, field, this))
                .toArray();
        var rowPredicateValues = rowPredicateSource
                .get()
                .map(field -> fieldGetWrapper(fieldGetFailuresOld, field, backup))
                .toArray();
        if (fieldGetFailuresNew.size() > 0 || fieldGetFailuresOld.size() > 0)
            return new Pair<>(fieldGetFailuresNew, fieldGetFailuresOld);
        database.update(connection, sql, Database.allArguments(columnAssignmentNewValues, rowPredicateValues));
        return new Pair<>(fieldGetFailuresNew, fieldGetFailuresOld);
    }

    /**
     * Update this tuple.
     *
     * @param tableName Table name.
     * @return Return a pair of List&lt;FieldGetFailure&gt; where the left item is the new field
     *         get failures, and the right item is the original (backup) field get failures.
     *         Both lists in the Pair are empty if successful.
     * @throws SQLException Failure.
     */
    public Pair<List<FieldGetFailure>, List<FieldGetFailure>> update(String tableName) throws SQLException {
        if (database == null)
            throw new InvalidValueException("Tuple is not insertable, because this Tuple was not constructed with a Database argument.");
        return database.useConnection(conn -> update(conn, tableName));
    }

    /**
     * Return true if the result of an update(...) contains no field failurees.
     *
     * @param updateResult Result of an update(...)
     * @return true if updateResult contains no field failures.
     */
    public static boolean isOk(Pair<List<FieldGetFailure>, List<FieldGetFailure>> updateResult) {
        return updateResult.left.isEmpty() && updateResult.right.isEmpty();
    }
}
