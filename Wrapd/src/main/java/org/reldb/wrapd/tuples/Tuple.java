package org.reldb.wrapd.tuples;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.reldb.wrapd.sqldb.Database;

/**
 * The base class for all tuples. Derived classes are usually auto-generated by TupleTypeGenerator.
 * 
 * @author dave
 *
 */
public abstract class Tuple implements Serializable {
	
	private static final long serialVersionUID = 1L;
	
	// Backup made at time tuple is retrieved, prior to changing any fields.
	private Tuple __backup = null;

	/** Create backup, to facilitate identifying changed fields as part of update. */
	public void backup() throws CloneNotSupportedException {
		__backup = (Tuple)super.clone();
	}
	
	/** Obtain backup, to facilitate identifying changed fields as part of update. */
	public Tuple getBackup() {
		return __backup;
	}

	/**
	 * Insert this Tuple.
	 * 
	 * @param database - Database
	 * @param connection - java.sql.Connection
	 * @param tableName - table name
	 * @param tuple - Tuple derivative.
	 * @return - should return false
	 * @throws SQLException on failure
	 */
	public boolean insert(Database database, Connection connection, String tableName, Tuple tuple) throws SQLException {
		Supplier<Stream<Field>> dataFields = () -> TupleTypeGenerator.getDataFields(tuple.getClass());
		Supplier<Stream<String>> columns = () -> dataFields.get().map(field -> field.getName());
		var columnNames = columns.get().collect(Collectors.joining(", "));
		var parms = "?"
				.repeat((int)columns.get().count())
				.replaceAll(".(?!$)", "$0, ");
		var sql = "INSERT INTO " + database.replaceTableNames(tableName) + "(" + columnNames + ") VALUES (" + parms + ")";
		var columnValues = dataFields
			.get()
			.map(field -> {
				try {
					return field.get(tuple);
				} catch (IllegalArgumentException | IllegalAccessException e) {
					Database.log.error("ERROR: insert failed on field " + field.getName() + ": " + e);
					return null;
				}
			})
			.toArray(Object[]::new);
		return database.update(connection, sql, columnValues);
	}

	/**
	 * Insert this Tuple.
	 * 
	 * @param database - Database
	 * @param tableName - table name
	 * @param tuple - Tuple derivative.
	 * @return - should return false
	 * @throws SQLException on failure
	 */
	public boolean insert(Database database, String tableName, Tuple tuple) throws SQLException {
		return database.useConnection(conn -> insert(database, conn, tableName, tuple));
	}

	public void update(Database database, Connection connection, String tableName, Tuple tuple) {
		// TODO Auto-generated method stub
	}
	
	public void update(Database database, String tableName, Tuple tuple) {
		// TODO Auto-generated method stub
	}
}
